import numpy as np
from collections import Counter

def count_pairs_with_sum(numbers, target_value):
    frequency_map = {}
    total_pairs = 0
    
    for number in numbers:
        required_value = target_value - number
        if required_value in frequency_map:
            total_pairs += frequency_map[required_value]
        if number in frequency_map:
            frequency_map[number] += 1
        else:
            frequency_map[number] = 1
    
    return total_pairs

def calculate_range(data):
    if len(data) < 2:
        return "Range determination not possible"
    
    min_value = min(data)
    max_value = max(data)
    range_difference = max_value - min_value
    
    return range_difference

def matrix_power(matrix, exponent):
    if not isinstance(matrix, np.ndarray):
        matrix = np.array(matrix)
    
    if matrix.shape[0] != matrix.shape[1]:
        raise ValueError("The matrix must be square.")
    
    return np.linalg.matrix_power(matrix, exponent)

def find_most_frequent_char(text):
    filtered_text = ''.join(char.lower() for char in text if char.isalpha())
    char_freq = Counter(filtered_text)
    
    if not char_freq:
        return None, 0
    
    most_char, most_count = char_freq.most_common(1)[0]
    
    return most_char, most_count

if __name__ == "__main__":
    nums_list = [2, 7, 4, 1, 3, 6]
    target_sum = 10
    pair_count = count_pairs_with_sum(nums_list, target_sum)
    print(f"The number of pairs with sum equal to {target_sum} is: {pair_count}")

    input_list = input("Enter a list of numbers separated by spaces: ")
    input_list = list(map(int, input_list.split()))
    range_result = calculate_range(input_list)
    print(f"The range of the list is: {range_result}")

    matrix_input = input("Enter a square matrix (comma-separated values, rows separated by semicolons): ")
    matrix_rows = matrix_input.split(';')
    matrix = [list(map(int, row.split(','))) for row in matrix_rows]
    exponent = int(input("Enter the exponent for the matrix: "))
    result_matrix = matrix_power(matrix, exponent)
    print(f"The matrix raised to the power of {exponent} is:")
    print(result_matrix)

    input_text = input("Enter a string to find the most frequent character: ")
    character, frequency = find_most_frequent_char(input_text)
    if character:
        print(f"The most frequent character is '{character}' with a count of {frequency}.")
    else:
        print("No alphabetic characters found in the input text.")
